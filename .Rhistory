mutate(cutoff = ifelse(value > 100, "Above ULN", "WNL")) %>%
mutate(cutoff = ifelse(is.na(value), "Not elicited", cutoff))
tab_motor_C = tab_motor %>%
filter(param %in% c("CMAP1", "CMAP2", "CMAP3", "CMAP4",
"NCV1", "NCV2", "NCV3")) %>%
mutate(cutoff = ifelse(value < 100, "Below LLN", "WNL"))
tab_motor_all = rbind(tab_motor_A, tab_motor_B, tab_motor_C)
df_motor_all = tab_motor_all
# Parameter View; angular axis = parameter, category = nerve
motor_radial <- df_motor_all
motor_radial <- data.frame(motor_radial) %>%
filter(param %in% c("CMAP1", "CMAP2",
"DML", "Dur1", "Dur2",
"NCV1", "FL")) %>%
mutate(param = factor(param))
df_motor_radial = motor_radial
lay = function(x) {
x %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(-50, (round(
max(df_motor_radial$value, na.rm = T)/50)+1)*50)
),
angularaxis = list(
tickfont = list(size = 20)
)
),
legend = list(font = list(size = 20), x = 100, y = 0.5)
)
}
df_motor_radial %>%
group_by(side.nerve) %>%
arrange(param) %>%
plot_ly(type = 'scatterpolar') %>%
add_trace(r = ~value,
theta = ~param,
name = ~side.nerve,
mode = 'lines+markers') %>%
add_trace(r = 100,
theta = ~param,
name = "ULN(LLN)",
line = list(dash = "dot")) %>%
lay()
df_selected = df %>%
filter(ID == "1456214")
tab_motor = df_selected %>%
gather(key = "side.nerve.param",
value = "value", c(R.MM.DML:R.TM.FL, L.MM.DML:L.TM.FL)) %>%
separate(side.nerve.param,
into = c("side", "nerve", "param"),
sep = "\\.") %>%
mutate(side.nerve = paste(side, nerve, sep=".")) %>%
mutate(side.nerve = factor(side.nerve,
levels =
c("R.MM", "R.UM", "R.PM", "R.TM",
"L.TM", "L.PM", "L.UM", "L.MM"))) %>%
filter(param %in% c("CMAP1", "CMAP2", "CMAP3", "CMAP4",
"DML", "Dur1", "Dur2", "Dur3", "Dur4",
"NCV1", "NCV2", "NCV3", "FL")) %>%
mutate(param = factor(param,
levels = c("CMAP1", "CMAP2", "CMAP3", "CMAP4",
"DML", "Dur1", "Dur2", "Dur3", "Dur4",
"NCV1", "NCV2", "NCV3", "FL"))) %>%
select(Date, side.nerve, param, value)
# for tile view
tab_motor_A = tab_motor %>%
filter(param %in% c("DML", "Dur1", "Dur2", "Dur3", "Dur4")) %>%
mutate(cutoff = ifelse(value > 100, "Above ULN", "WNL"))
tab_motor_B = tab_motor %>%
filter(param == "FL") %>%
mutate(cutoff = ifelse(value > 100, "Above ULN", "WNL")) %>%
mutate(cutoff = ifelse(is.na(value), "Not elicited", cutoff))
tab_motor_C = tab_motor %>%
filter(param %in% c("CMAP1", "CMAP2", "CMAP3", "CMAP4",
"NCV1", "NCV2", "NCV3")) %>%
mutate(cutoff = ifelse(value < 100, "Below LLN", "WNL"))
tab_motor_all = rbind(tab_motor_A, tab_motor_B, tab_motor_C)
df_motor_all = tab_motor_all
# Parameter View; angular axis = parameter, category = nerve
motor_radial <- df_motor_all
motor_radial <- data.frame(motor_radial) %>%
filter(param %in% c("CMAP1", "CMAP2",
"DML", "Dur1", "Dur2",
"NCV1", "FL")) %>%
mutate(param = factor(param))
df_motor_radial = motor_radial
lay = function(x) {
x %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(-50, (round(
max(df_motor_radial$value, na.rm = T)/50)+1)*50)
),
angularaxis = list(
tickfont = list(size = 20)
)
),
legend = list(font = list(size = 20), x = 100, y = 0.5)
)
}
df_motor_radial %>%
group_by(side.nerve) %>%
arrange(param) %>%
plot_ly(type = 'scatterpolar') %>%
add_trace(r = ~value,
theta = ~param,
name = ~side.nerve,
mode = 'lines+markers') %>%
add_trace(r = 100,
theta = ~param,
name = "ULN(LLN)",
line = list(dash = "dot")) %>%
lay()
df_motor_radial %>%
group_by(param) %>%
arrange(side.nerve) %>%
plot_ly(type = 'scatterpolar') %>%
add_trace(r = ~value,
theta = ~side.nerve,
name = ~param,
mode = 'lines+markers') %>%
add_trace(r = 100,
theta = ~side.nerve,
name = "ULN(LLN)",
line = list(dash = 'dot'))  %>%
lay()
# Hadden's criteria
df = df_motor_radial %>%
arrange(Date) %>%
filter(Date == first(Date))
# DML
df = df %>% select(-c(cutoff, Date))
df = spread(df, key = param, value = value)
DML = df %>%
group_by(side.nerve) %>%
summarize(dml = case_when(
is.na(DML) ~ "NA",
DML <=100 ~ "NL",
(CMAP1 >=100 & DML >110)|(CMAP1 <100 & DML >120) ~ "PD",
TRUE ~ "ND"))
NCV = df %>%
group_by(side.nerve) %>%
summarise(ncv = case_when(
is.na(NCV1) ~ "NA",
NCV1 >100 ~ "NL",
(CMAP1 >=50 & NCV1 <90)|(CMAP1 <50 & NCV1 <85) ~ "PD",
TRUE ~ "ND"))
CB = df %>%
group_by(side.nerve) %>%
summarize(cb = case_when(
is.na(CMAP1)|CMAP1==0 ~ "NA",
CMAP2/CMAP1 >=0.5 ~ "NL",
CMAP2/CMAP1 <0.5 & CMAP1 >=20 ~ "PD",
TRUE ~ "ND"))
FL = df %>%
group_by(side.nerve) %>%
summarize(fl = case_when(
is.na(CMAP1) ~ "NA",
is.na(FL) & CMAP1 >0 ~ "FA",
FL <=100 ~ "NL",
FL >120 ~ "PD",
TRUE ~ "ND"))
DML = DML$dml
NCV = NCV$ncv
CB = CB$cb
FL = FL$fl
df_table = data.frame(rbind(DML, NCV, CB, FL))
colnames(df_table) = df$side.nerve
df_table$param = c("DML", "NCV", "CB", "FL")
df_cnt = apply(df_table, 2, function(x){length(x[x=="PD"])})
length(df_cnt[df_cnt>=1])>=2
df_table_long = gather(df_table, key = "side.nerve",
value = "feature", R.MM:L.MM) %>%
mutate(feature = factor(feature)) %>%
mutate(param = factor(param))
levels(df_table_long$feature) = list(Normal = "NL",
Primary_demyelinating = "PD",
Not_determined = "ND",
F_absence = "FA",
Not_available = "NA")
levels(df_table_long$param) = list(DML = "DML",
NCV = "NCV",
CB = "CB",
FL = "FL")
p <- ggplot(df_table_long, aes(x=side.nerve, y=param,
fill = feature)) +
geom_tile(color = "black") + theme_minimal() +
theme(axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text = element_text(size = 14, face = "bold"))
p <- p + scale_fill_manual(
values = c("green", "red", "blue", "orange", "grey"),
name = "")
p
values = c("green", "red", "blue", "orange", "grey"),
name = "") +
ggtitle("Hadden's criteria")
p
p <- p + scale_fill_manual(
values = c("green", "red", "blue", "orange", "grey"),
name = "") +
ggtitle("Hadden's criteria")
p
p <- ggplot(df_table_long, aes(x=side.nerve, y=param,
fill = feature)) +
geom_tile(color = "black") + theme_minimal() +
ggtitle("Hadden's criteria") +
theme(axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face = "bold"),
title = element_text(size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text = element_text(size = 14, face = "bold"))
p <- p + scale_fill_manual(
values = c("green", "red", "blue", "orange", "grey"),
name = "")
p
CB
head(df)
names(CB)
df$side.nerve
# exclude the tibial nerve
CB[4] = ifelse(CB[4] == "NA", CB[4], "ND") # R.TM
CB[5] = ifelse(CB[5] == "NA", CB[5], "ND") # L.TM
CB
FL = df %>%
group_by(side.nerve) %>%
summarize(fl = case_when(
is.na(CMAP1) ~ "NA",
is.na(FL) & CMAP1 >0 ~ "FA",
FL <=100 ~ "NL",
FL >120 ~ "PD",
TRUE ~ "ND"))
DML = DML$dml
NCV = NCV$ncv
CB = CB$cb
FL = FL$fl
df_table = data.frame(rbind(DML, NCV, CB, FL))
colnames(df_table) = df$side.nerve
df_table$param = c("DML", "NCV", "CB", "FL")
df_cnt = apply(df_table, 2, function(x){length(x[x=="PD"])})
length(df_cnt[df_cnt>=1])>=2
# if meet Hadden's criteria of AIDP
length(df_cnt[df_cnt>=1])>=2
# number of nerve with at least one demyelinating features
length(df_cnt[df_cnt>=1])
df_table = data.frame(rbind(DML$dml, NCV$ncv, CB$cb, FL$fl))
colnames(df_table) = df$side.nerve
df_table = data.frame(rbind(DML$dml, NCV$ncv, CB$cb, FL$fl))
FL = df %>%
group_by(side.nerve) %>%
summarize(fl = case_when(
is.na(CMAP1) ~ "NA",
is.na(FL) & CMAP1 >0 ~ "FA",
FL <=100 ~ "NL",
FL >120 ~ "PD",
TRUE ~ "ND"))
DML = DML$dml
NCV = NCV$ncv
CB = CB$cb
DML = df %>%
group_by(side.nerve) %>%
summarize(dml = case_when(
is.na(DML) ~ "NA",
DML <=100 ~ "NL",
(CMAP1 >=100 & DML >110)|(CMAP1 <100 & DML >120) ~ "PD",
TRUE ~ "ND"))
NCV = df %>%
group_by(side.nerve) %>%
summarise(ncv = case_when(
is.na(NCV1) ~ "NA",
NCV1 >100 ~ "NL",
(CMAP1 >=50 & NCV1 <90)|(CMAP1 <50 & NCV1 <85) ~ "PD",
TRUE ~ "ND"))
CB = df %>%
group_by(side.nerve) %>%
summarize(cb = case_when(
is.na(CMAP1)|CMAP1==0 ~ "NA",
CMAP2/CMAP1 >=0.5 ~ "NL",
CMAP2/CMAP1 <0.5 & CMAP1 >=20 ~ "PD",
TRUE ~ "ND"))
# exclude the tibial nerve
CB[4] = ifelse(CB[4] == "NA", CB[4], "ND") # R.TM
CB[5] = ifelse(CB[5] == "NA", CB[5], "ND") # L.TM
FL = df %>%
group_by(side.nerve) %>%
summarize(fl = case_when(
is.na(CMAP1) ~ "NA",
is.na(FL) & CMAP1 >0 ~ "FA",
FL <=100 ~ "NL",
FL >120 ~ "PD",
TRUE ~ "ND"))
df_table = data.frame(rbind(DML$dml, NCV$ncv, CB$cb, FL$fl))
colnames(df_table) = df$side.nerve
df_table$param = c("DML", "NCV", "CB", "FL")
df_motor_radial
# number of nerve with at least one demyelinating features
cnt_nerve_dem = length(df_cnt[df_cnt>=1])
p <- ggplot(df_table_long, aes(x=side.nerve, y=param,
fill = feature)) +
geom_tile(color = "black") + theme_minimal() +
labs(title = "Hadden's criteria", subtitle =
paste("Number of nerves with at least 1 demyelinating features:",
cnt_nerve_dem, sep = " ")) +
theme(axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face = "bold"),
title = element_text(size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text = element_text(size = 14, face = "bold"))
p <- p + scale_fill_manual(
values = c("green", "red", "blue", "orange", "grey"),
name = "")
p
p <- ggplot(df_table_long, aes(x=side.nerve, y=param,
fill = feature)) +
geom_tile(color = "black") + theme_minimal() +
labs(title = "Hadden's criteria", subtitle =
paste("Number of nerves with at least 1 demyelinating features:",
cnt_nerve_dem, sep = " ")) +
theme(axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face = "bold"),
title = element_text(size = 16, face = "bold"),
subtitle = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text = element_text(size = 14, face = "bold"))
p <- p + scale_fill_manual(
values = c("green", "red", "blue", "orange", "grey"),
name = "")
p
p <- ggplot(df_table_long, aes(x=side.nerve, y=param,
fill = feature)) +
geom_tile(color = "black") + theme_minimal() +
labs(title = "Hadden's criteria") +
theme(axis.text.x = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 14, face = "bold"),
title = element_text(size = 16, face = "bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.background = element_blank(),
legend.text = element_text(size = 14, face = "bold"))
p <- p + scale_fill_manual(
values = c("green", "red", "blue", "orange", "grey"),
name = "")
p
feature_table = reactive({
if (is.null(df_motor_radial())) return(NULL)
df = df_motor_radial() %>% select(-c(cutoff, Date))
df = spread(df, key = param, value = value)
DML = df %>%
group_by(side.nerve) %>%
summarize(dml = case_when(
is.na(DML) ~ "NA",
DML <=100 ~ "NL",
(CMAP1 >=100 & DML >110)|(CMAP1 <100 & DML >120) ~ "PD",
TRUE ~ "ND"))
NCV = df %>%
group_by(side.nerve) %>%
summarise(ncv = case_when(
is.na(NCV1) ~ "NA",
NCV1 >100 ~ "NL",
(CMAP1 >=50 & NCV1 <90)|(CMAP1 <50 & NCV1 <85) ~ "PD",
TRUE ~ "ND"))
CB = df %>%
group_by(side.nerve) %>%
summarize(cb = case_when(
is.na(CMAP1)|CMAP1==0 ~ "NA",
CMAP2/CMAP1 >=0.5 ~ "NL",
CMAP2/CMAP1 <0.5 & CMAP1 >=20 ~ "PD",
TRUE ~ "ND"))
# exclude the tibial nerve
CB[4] = ifelse(CB[4] == "NA", CB[4], "ND") # R.TM
CB[5] = ifelse(CB[5] == "NA", CB[5], "ND") # L.TM
FL = df %>%
group_by(side.nerve) %>%
summarize(fl = case_when(
is.na(CMAP1) ~ "NA",
is.na(FL) & CMAP1 >0 ~ "FA",
FL <=100 ~ "NL",
FL >120 ~ "PD",
TRUE ~ "ND"))
df_table = data.frame(rbind(DML$dml, NCV$ncv, CB$cb, FL$fl))
colnames(df_table) = df$side.nerve
df_table$param = c("DML", "NCV", "CB", "FL")
df_table
})
head(df_table_long)
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "PD") %>%
summarize(n())
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "PD") %>%
summarize(cnt = n())
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "PD") %>%
summarise(cnt = n())
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "PD")
# Tile view of demyelinating features (Hadden's criteria)
df_table_long = gather(df_table, key = "side.nerve",
value = "feature", R.MM:L.MM) %>%
mutate(feature = factor(feature)) %>%
mutate(param = factor(param))
levels(df_table_long$feature) = list(Normal = "NL",
Primary_demyelinating = "PD",
Not_determined = "ND",
F_absence = "FA",
Not_available = "NA")
levels(df_table_long$param) = list(DML = "DML",
NCV = "NCV",
CB = "CB",
FL = "FL")
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "PD")
head(df_table_long)
summary(df_table_long)
df_table_long %>%
group_by(factor(side.nerve)) %>%
filter(feature == "PD")
df_table_long %>%
group_by(factor(side.nerve)) %>%
filter(feature == "PD") %>%
summarise(n())
df_table_long %>%
mutate(side.nerve = factor(side.nerve)) %>%
group_by(side.nerve) %>%
filter(feature == "PD") %>%
summarise(n())
summary(df_table_long)
df_table_long$side.nerve = factor(df_table_long$side.nerve)
summary(df_table_long)
levels(df_table_long$side.nerve)
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "PD") %>%
summarise(n())
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "Primary_demyelinating") %>%
summarise(cnt = n())
# Tile view of demyelinating features (Hadden's criteria)
df_table_long = gather(df_table, key = "side.nerve",
value = "feature", R.MM:L.MM) %>%
mutate(feature = factor(feature)) %>%
mutate(param = factor(param))
levels(df_table_long$feature) = list(Normal = "NL",
Primary_demyelinating = "PD",
Not_determined = "ND",
F_absence = "FA",
Not_available = "NA")
levels(df_table_long$param) = list(DML = "DML",
NCV = "NCV",
CB = "CB",
FL = "FL")
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "Primary_demyelinating") %>%
summarise(cnt = n())
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "Primary_demyelinating") %>%
summarise(cnt = n()) %>%
summarise(cnt >= 1)
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "Primary_demyelinating") %>%
summarise(cnt = n()) %>%
filter(cnt >= 1)
dim(temp)[1]
df_table_long %>%
group_by(side.nerve) %>%
filter(feature == "Primary_demyelinating") %>%
summarise(cnt = n()) -> temp
dim(temp)[1]
library(shiny); runApp('~/Documents/GitHub/NCViewer/ncviewer.R')
runApp('~/Documents/GitHub/NCViewer/ncviewer.R')
d
df
rm(df)
rm(df)
runApp('~/Documents/GitHub/NCViewer/ncviewer.R')
rm(temp)
rm(DML)
rm(NCV)
rm(CB)
rm(FL)
rm(df_table)
rm(df_table_long)
rm(p)
runApp('~/Documents/GitHub/NCViewer/ncviewer.R')
q()
